# Generated by Django 5.1.3 on 2025-04-10 17:59

import app_users.managers
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Filial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=255, unique=True, verbose_name='Псевдоним')),
                ('email', models.EmailField(blank=True, max_length=255, null=True, verbose_name='Почта')),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/employees/%Y/%m/%d/', verbose_name='Фото')),
                ('first_name', models.CharField(max_length=255, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=255, verbose_name='Фамилия')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создание')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Тзменено')),
                ('uuid', models.CharField(blank=True, null=True, unique=True, verbose_name='UUiD')),
                ('phone_number', models.CharField(blank=True, max_length=14, null=True, verbose_name='Номер Телефона')),
                ('telegram', models.CharField(blank=True, max_length=255, null=True, verbose_name='Телеграм')),
                ('whatsapp', models.CharField(blank=True, max_length=255, null=True, verbose_name='WhatsApp')),
                ('access_token', models.CharField(blank=True, max_length=255, null=True)),
                ('refresh_token', models.CharField(blank=True, max_length=255, null=True)),
                ('is_superuser', models.BooleanField(default=False, verbose_name='Супер пользователь')),
                ('is_active', models.BooleanField(default=False, verbose_name='Активный')),
                ('is_technolog', models.BooleanField(default=False, verbose_name='Технолог')),
                ('is_upakovka', models.BooleanField(default=False, verbose_name='Упаковка')),
                ('is_utug', models.BooleanField(default=False, verbose_name='Утюг')),
                ('is_croi', models.BooleanField(default=False, verbose_name='Крой')),
                ('is_buttons', models.BooleanField(default=False, verbose_name='Пуговица')),
                ('is_tailor', models.BooleanField(default=False, verbose_name='Портной')),
                ('is_povar', models.BooleanField(default=False, verbose_name='Повар')),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_permissions', to='auth.permission', verbose_name='user permissions')),
                ('filial', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app_users.filial', verbose_name='Филиал')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'users',
            },
            managers=[
                ('objects', app_users.managers.CustomUserManager()),
            ],
        ),
    ]
